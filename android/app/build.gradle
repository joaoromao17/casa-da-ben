apply plugin: 'com.android.application'

android {
    namespace "com.icb610.app"
    compileSdk rootProject.ext.compileSdkVersion

    defaultConfig {
        applicationId "com.icb610.app"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 10
        versionName "1.10"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        aaptOptions {
            ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:.*:!CVS:!thumbs.db:!picasa.ini:!*~'
        }
    }

    // --- NOVO BLOCO: Carrega as propriedades do keystore diretamente aqui ---
    def signingProperties = new Properties()
    def signingPropertiesFile = rootProject.file("keystore.properties")
    if (signingPropertiesFile.exists()) {
        signingProperties.load(new FileInputStream(signingPropertiesFile))
        // Substitui ${KEYSTORE_PASSWORD} por variável de ambiente real
        signingProperties.each { key, value ->
            if (value instanceof String && value.startsWith("${") && value.endsWith("}")) {
                def envKey = value.substring(2, value.length() - 1)
                def resolved = System.getenv(envKey)
                if (resolved == null) {
                    println("⚠️ Variável de ambiente \'${envKey}\' não encontrada!")
                } else {
                    println("✅ Variável \'${envKey}\' carregada com sucesso.")
                    signingProperties[key] = resolved
                }
            }
        }
        println("DEBUG APP: signingProperties.storeFile = " + signingProperties["storeFile"])
    } else {
        println("❌ Arquivo keystore.properties NÃO encontrado no app/build.gradle!")
    }
    // --- FIM DO NOVO BLOCO ---

signingConfigs {
    release {
        // AQUI USAMOS AS PROPRIEDADES DIRETAMENTE DO signingProperties
        def storeFileValue = signingProperties["storeFile"]
        if (storeFileValue != null) {
            def actualStoreFile = file(storeFileValue)
            if (actualStoreFile.exists()) {
                println("✅ storeFile encontrado no app/build.gradle: " + actualStoreFile)
                storeFile actualStoreFile
                storePassword signingProperties["storePassword"]
                keyAlias signingProperties["keyAlias"]
                keyPassword signingProperties["keyPassword"]
            } else {
                println("⚠️ Keystore não configurado corretamente no app/build.gradle: Arquivo não encontrado em " + storeFileValue)
            }
        } else {
            println("⚠️ Keystore não configurado corretamente no app/build.gradle: storeFile é nulo.")
        }
    }
}

buildTypes {
    release {
        signingConfig signingConfigs.release
        minifyEnabled true
        shrinkResources true
        proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
    }
}
}

repositories {
    flatDir {
        dirs '../capacitor-cordova-android-plugins/src/main/libs', 'libs'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "androidx.appcompat:appcompat:${rootProject.ext.androidxAppCompatVersion}"
    implementation "androidx.coordinatorlayout:coordinatorlayout:${rootProject.ext.androidxCoordinatorLayoutVersion}"
    implementation "androidx.core:core-splashscreen:${rootProject.ext.coreSplashScreenVersion}"
    implementation project(':capacitor-android')
    testImplementation "junit:junit:${rootProject.ext.junitVersion}"
    androidTestImplementation "androidx.test.ext:junit:${rootProject.ext.androidxJunitVersion}"
    androidTestImplementation "androidx.test.espresso:espresso-core:${rootProject.ext.androidxEspressoCoreVersion}"
    implementation project(':capacitor-cordova-android-plugins')

    // Firebase BoM (Bill of Materials)
    implementation platform('com.google.firebase:firebase-bom:33.16.0')
    implementation 'com.google.firebase:firebase-messaging'
}

apply from: 'capacitor.build.gradle'

try {
    def servicesJSON = file('google-services.json')
    if (servicesJSON.text) {
        apply plugin: 'com.google.gms.google-services'
    }
} catch(Exception e) {
    logger.info("google-services.json not found, google-services plugin not applied. Push Notifications won't work")
}